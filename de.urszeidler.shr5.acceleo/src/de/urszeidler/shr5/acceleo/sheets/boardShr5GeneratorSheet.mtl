[comment encoding = UTF-8 /]
[module boardShr5GeneratorSheet('http://urszeidler.de/shr5/1.0', 'http://urszeidler.de/shr5mngt/1.0', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import de::urszeidler::shr5::acceleo::common::ShadowrunTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunManagmentTools  /]
[import de::urszeidler::shr5::acceleo::sheets::boardCharacterSheet/]
[import de::urszeidler::shr5::acceleo::common::ShadowrunSheetTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunBBSheetTools  /]
[import de::urszeidler::shr5::acceleo::util::shadowrunTextTools  /]

[template public boardShr5GeneratorSheetManagedCharacter(aShr5Generator : Shr5Generator)]	
	[comment @main /]
[file ('Shr5Generator-'+aShr5Generator.characterName+'.txt', false, 'UTF-8')]
[generateShr5GeneratorSheet(aShr5Generator)/]
[/file]

	
[/template]


[template public generateShr5GeneratorSheet(aShr5Generator : Shr5Generator) 
{aManagedCharacter : ManagedCharacter = aShr5Generator.character;
empty :String =  '.........................' ;
empty1 :String = '....' ;
empty2 : String = '                                             ';
shr5System : Shr5System = aShr5Generator.generator.oclAsType(Shr5System);
}]
[printGeneratorReport(aShr5Generator)/]

[printAttributeSum(aShr5Generator,empty,empty1)/]

Skillgroup sum     : [sumSkillGroups(aManagedCharacter.persona)/]
Skill      sum     : [sumActiveSkills(aManagedCharacter.persona)/]
Knowlege skill/sum : [calcKnownlegeSkillPoints(aManagedCharacter, shr5System) /]/[sumKnowSkills(aManagedCharacter.persona)/]
Quallity sum       : [sumQuallitiyKarma(aManagedCharacter.persona.oclAsType(KoerperPersona))/]
Connections        : [calcConnectionsPoints(aManagedCharacter, shr5System)/]/[calcConnectionsSpend(aManagedCharacter)/]
Resources spend    : [calcResourcesSpend(aManagedCharacter)/]


[let kp : KoerperPersona = aManagedCharacter.persona.oclAsType(KoerperPersona)]
[printQualities(kp.eigenschaften, empty2)/]


								Verfügbarkeit	Preis		Quelle
[printAugmentations(kp.koerperMods, empty2)/]
[/let]

[printGear(aManagedCharacter.inventar->asSequence(), empty2)/]

[printVehicles(aManagedCharacter.vehicels, empty2)/]

[printContracts(aManagedCharacter.contracts->asSequence(),empty)/]


[printKarmaBase(aShr5Generator)/]

[printBoardCharacterReport(aManagedCharacter)/]
[/template]

[template public printVehicles(sg : OrderedSet(Fahrzeug),empty :String)? (not sg->isEmpty())]
['_UI_ManagedCharacter_vehicels_feature'.localizedString().titelText()/]
[for (pfg : Fahrzeug | sg)]
[printVehicle(pfg, empty)/]
[/for]
------
[printTextPlusSpace('sum :', empty)/] [calcListenWertToString(sg->asSequence()) /]
[/template]

[template private printVehicle(vehicle : Fahrzeug,empty :String)]
[printTextPlusSpace(vehicle.getText()  ,empty)/]			[vehicle.oclAsType(GeldWert).verfuegbarkeit/]		[vehicle.oclAsType(GeldWert).wert.formatMoney()/]		[vehicle.srcBook.code/] [vehicle.page/]
[if (not vehicle.modifizierungen->isEmpty())][printGeldwertCollection(vehicle.modifizierungen, vehicle.wert,empty, '- ')/][/if][/template]



[template public printQualities(gears : OrderedSet(PersonaEigenschaft),empty :String) ? (not gears->isEmpty())]
['_UI_KoerperPersona_eigenschaften_feature'.localizedString().titelText()/]
[for (ag : PersonaEigenschaft | gears)]
[printTextPlusSpace(ag.getText(),empty)/]			[ag.karmaKosten/] 		[ag.srcBook.code/] [ag.page/]
[/for]
------
[printTextPlusSpace('sum :', '....')/]		[sumQuallitiyKarma(gears)/]
[/template]


[template public printAugmentations(gears : OrderedSet(Koerpermods),empty :String) ? (not gears->isEmpty())
]
['_UI_KoerperPersona_koerperMods_feature'.localizedString().titelText()/]
[for (ag : Koerpermods | gears)]
[printTextPlusSpace(ag.getText(),empty)/]			[ag.oclAsType(GeldWert).verfuegbarkeit/]		[ag.oclAsType(GeldWert).wert.formatMoney()/]		[ag.srcBook.code/] [ag.page/]		[ag.getEssencesValue()/100/]
[if (ag.oclIsKindOf(Cyberware))]
[for (ce : CyberwareEnhancement | ag.oclAsType(Cyberware).einbau)]
-[printTextPlusSpace(ce.getText(),empty)/]			[ce.oclAsType(GeldWert).verfuegbarkeit/]		([ce.oclAsType(GeldWert).wert.formatMoney()/])		[ce.srcBook.code/] [ce.page/]
[/for]
[/if]
[/for]
--------
[printTextPlusSpace('sum :', '....')/]		[calcListenWertToString(gears->asSequence())/]
[/template]


[template public printGear(gears : Sequence(AbstraktGegenstand), empty :String)? (not gears->isEmpty())]
['_UI_ManagedCharacter_inventar_feature'.localizedString().titelText()/]
[for (ag : AbstraktGegenstand | gears)]
[printGegenstand(ag, empty)/]
[/for]
--------
[printTextPlusSpace('sum :', '....')/] 		[calcListenWertToString(gears) /] ¥
[/template]


[template private printGegenstand(gegenstand : AbstraktGegenstand,empty :String)]
[printTextPlusSpace(gegenstand.getText(),empty)/]			[gegenstand.verfuegbarkeit/]		[gegenstand.wert.formatMoney()/]		[gegenstand.srcBook.code/] [gegenstand.page/]
[/template]

[template private printGegenstand(comlink : Commlink,empty :String)]
[printTextPlusSpace(comlink.getText()  ,empty)/]			[comlink.verfuegbarkeit/]		[comlink.wertValue.formatMoney() /]		[comlink.srcBook.code/] [comlink.page/]
[printGeldwertCollection(comlink.storedPrograms, comlink.wert,empty, '- ')/][/template]

[template public printKarmaBase (aShr5Generator : Shr5Generator) 
{aManagedCharacter : ManagedCharacter = aShr5Generator.character;
shr5System : Shr5System = aShr5Generator.generator.oclAsType(Shr5System);
a : CharacterAdvancementSystem = aShr5Generator.generator.characterAdvancements
}]
['Calculated Karma Cost'.italicText()/]
Karma spend by attributes   : [calcKarmaSpendByAttributes(aManagedCharacter, a)/]
Karma spend by skillgroups  : [calcKarmaSpendBySkillGroups(aManagedCharacter, a)/]
Karma spend by skills       : [calcKarmaSpendBySkills(aManagedCharacter, a)/]
Karma spend by specalism    : [calcKarmaSpendBySpecalism(aManagedCharacter, a)/]
Karma spend by resourcen    : [calcKarmaSpendByResources(aShr5Generator)/]
Karma spend by quallities   : [calcKarmaSpendByQuallities(aManagedCharacter, a)/]
[if (aManagedCharacter.persona.oclIsKindOf(Zauberer))]
Karma spend by spells       : [calcKarmaSpendBySpellsOrForms(aManagedCharacter, a)/]
[/if]
[if (aManagedCharacter.persona.oclIsKindOf(Technomancer) )]
Karma spend by complex forms: [calcKarmaSpendBySpellsOrForms(aManagedCharacter, a)/]
[/if]
Karma spend by connections  : [calcKarmaSpendByConnections(aManagedCharacter)/]

karma worth                 : [calcCompleteKaramaSpend(aManagedCharacter, aShr5Generator.generator.characterAdvancements)/]

[/template]

[template public printAttributeSum (aShr5Generator : Shr5Generator,emtpty :String,empty1 :String)
{aManagedCharacter : ManagedCharacter = aShr5Generator.character;
species : Spezies =  aShr5Generator.character.persona.spezies ;
persona : AbstraktPersona = aShr5Generator.character.persona ;} ]
['Attribute points'.titelText()/]
[printTextPlusSpace('.', emtpty)/][printTextPlusSpace('rtg', empty1) /]pt
[for (ea : EAttribute | getOrderedBasedAttibutesForPersona(persona))]
[let attributeName : String = getText(base2Calced(ea))]
[printTextPlusSpace(attributeName, emtpty)/][printTextPlusSpace(persona.eGet(ea).toString(), empty1) /][persona.eGet(ea).oclAsType(Integer)- species.eGet(ea.base2SpeciesMin()).oclAsType(Integer)/]  
[/let]
[/for]

[printTextPlusSpace('sum', emtpty)/][printTextPlusSpace('.', empty1) /][sumAttributes(aManagedCharacter.persona)/]
[/template]

[template private printGeneratorValues(aShr5Generator : Shr5Generator){aManagedCharacter : ManagedCharacter = aShr5Generator.character;
shr5System : Shr5System = aShr5Generator.generator.oclAsType(Shr5System);
}]
Generator system 	  [getText(aShr5Generator.generator)/] 	
Karma to spend   	  [shr5System.karmaPoints  /] 
Karma to resource 	  [aShr5Generator.karmaToResource/]
Resources complete 	  [aShr5Generator.resourcen.resource + calcKarmaToResources(aShr5Generator, shr5System)  /]
Connections points 	  [calcConnectionsPoints(aManagedCharacter, shr5System) /]
Knowledge skills 	  [calcKnownlegeSkillPoints(aManagedCharacter, shr5System) /]

Start Karma			  [aShr5Generator.startKarma /]
Start Resources		  [aShr5Generator.startResources /]
[/template]

[**
 * Print the chosen prorities.
*/]
[template public printGeneratorReport(aShr5Generator : Shr5Generator )]
['Priorities'.titelText()/]
[getText(aShr5Generator.attribute)/]
[getText(aShr5Generator.skills)/]
[getText(aShr5Generator.metaType)/]
[getText(aShr5Generator.magic)/]
[getText(aShr5Generator.resourcen)/]

[printGeneratorValues(aShr5Generator)/]
[/template]