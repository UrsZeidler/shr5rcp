[comment encoding = UTF-8 /]
[module svgCharacterSheet('http://urszeidler.de/shr5/1.0', 'http://urszeidler.de/shr5mngt/1.0', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import de::urszeidler::shr5::acceleo::common::ShadowrunTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunManagmentTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunSheetTools  /]
[import de::urszeidler::shr5::acceleo::common::shr5EEnumhelper  /]
[import de::urszeidler::shr5::acceleo::common::shr5ManagementEEnumhelper  /]
[import de::urszeidler::shr5::acceleo::util::shadowrunTextTools  /]



[template public svgCharacterSheetManagedCharacter(aManagedCharacter : ManagedCharacter)]
	
	[comment @main /]
[aManagedCharacter.printNewCharacterSheetPageOne()/]
[if (not aManagedCharacter.inventar->selectByKind(RiggerCommandConsole)->isEmpty())]
[aManagedCharacter.printRiggerSheetPageTwo()/]
[elseif (aManagedCharacter.persona.oclIsKindOf(Zauberer))]
[aManagedCharacter.printSpellcasterSheetPageTwo()/]
[else]
[aManagedCharacter.printNewCharacterSheetPageTwo()/]	
[/if]
[aManagedCharacter.printVariousSheetPageThree()/]
	
[/template]



[template public printVariousSheetPageThree(aManagedCharacter : ManagedCharacter)  
{
kp : KoerperPersona =  aManagedCharacter.persona.oclAsType(KoerperPersona);
cl : Commlink = aManagedCharacter.inventar->selectByType(Commlink)-> any(true);
empty : String = '....................' ;
empty40 : String = '........................................' ; 
empty80 : String = empty40+empty40 ; 
column : Sequence(Integer) = Sequence{45,420} ;
size : Integer = 12; }
]  [comment]30[/comment]
[file ('VariousSheet-'+aManagedCharacter.persona.name+'-page3.svg', false, 'UTF-8')]
[pageStart('Various page for '+aManagedCharacter.persona.name)+' page 3'/]

[comment]print the spell list 2/3 of the page[/comment]
<g
       id="g-CredSticks"
transform="translate([column->at(1)/],25)">
[printLeftSideUp('Credsticks'.localizedString())/]
[for (cs : Credstick | aManagedCharacter.inventar->selectByType(Credstick) )]
[let y : Integer =( (50+((i-1)*160))  ) ]
[let log : Sequence(CredstickTransaction) = cs.transactionlog->asSequence()]

[printSvgFullLine(cs.getText(), empty40,10,y,220)/]
[printSvgLineValue(cs.maxValue,240,y,size)/]
[for (ct : CredstickTransaction | log)]
[let y1 : Integer = y+ (log->indexOf(ct) *10)]
[if (log->indexOf(ct)<10)]
[printSvgLineValue(ct.description,15,y1,10)  /]
[printSvgLineValueWithLength(ct.date,150,y1,10,120)  /]
[printSvgLineValue(ct.amount.formatMoney(),280,y1,10)  /]
[/if]

[/let]
[/for]
[/let]
[printLine(115, y+108, 210)/]
[printSvgLineValue('current ammount',120,y+120,12)  /]
[printSvgLineValue(cs.currentValue.formatMoney(),280,y+120,12)  /]
[/let][/for]
[printBotton(column->at(1), 500, 150)/]
</g>
<g
       id="g-sins"
transform="translate([column->at(1)/],560)">
[printLeftSideUp('Sins'.localizedString())/]
[for (cs : Sin | aManagedCharacter.contracts->selectByKind(Sin) )]
[let y : Integer =( (50+((i-1)*12))  ) ]
[printSvgFullLine(cs.getText(), empty40,10,y,220)/]
[printSvgLineValue(cs.stufe,240,y,size)/]
[printSvgLineValue(cs.gefaelscht,280,y,size)/]
[/let]
[/for]
[for (cs : Lizenz | aManagedCharacter.contracts->selectByKind(Lizenz) )]
[let y : Integer =( (50+((aManagedCharacter.contracts->selectByKind(Sin)->size())*12)+(i-1)*12)  ) ]
[printSvgFullLine(cs.getText(), empty40,10,y,220)/]
[printSvgLineValue(cs.stufe,240,y,size)/]
[printSvgLineValue(cs.gefaelscht,280,y,size)/]
[comment][printSvgLineValue(cs.lizenzTraeger.getText(),280,y,size)/][/comment]
[/let]
[/for]
[printBotton(column->at(1), 150, 30)/]
</g>
<g
       id="g-lifestyle"
transform="translate([column->at(1)/],745)">
[printLeftSideUp('Lifestyle'.localizedString())/]

[printSvgFullLine(aManagedCharacter.choosenLifestyle.getText(), empty40,10,50,220)/]
[printSvgLineValue(aManagedCharacter.choosenLifestyle.wert.formatMoney(), 230,50,12)/]

[for (cs : Lifestyle | aManagedCharacter.contracts->selectByKind(Lifestyle) )]
[let y : Integer =( (65+((i-1)*12))  ) ]
[if (not(aManagedCharacter.choosenLifestyle=cs))]
[printSvgFullLine(cs.getText(), empty40,10,y,220)/]
[printSvgLineValue(aManagedCharacter.choosenLifestyle.wert.formatMoney(), 220,y,12)/]
[/if]
[/let]
[/for]
[printBotton(column->at(1), 100,20)/]
</g>
[if (not cl.oclIsUndefined())]
<g
       id="g-comlink"
transform="translate([column->at(1)/],880)">
[printLeftSideUp('comlinkt'.localizedString())/]

[printComlinkDetail(cl ,empty40,10,50,12  )  /]
[printBotton(column->at(1), 150,30)/]
</g>
[comment]end[/comment]
[/if]
<g
       id="g-Advancement"
transform="translate([column->at(2)/],25)">
[printRightSideUp('Advancement'.localizedString())/]

[for (c : Changes | aManagedCharacter.changes)]
[let y : Integer =( (50+((i-1)*12))  ) ]
[printSvgFullLine(c.getText(), empty40+empty,10,y,290)/]
[comment][printSvgLineValue(c.dateApplied,240,y,size)/][/comment]
[printSvgLineValue(c.karmaCost,310,y,size)/]
[/let]
[/for]




[printBotton(column->at(1), 900,400)/]
</g>
  </g>
</svg>
[/file]
[/template]


[template public printSpellcasterSheetPageTwo(aManagedCharacter : ManagedCharacter)  
{
kp : KoerperPersona =  aManagedCharacter.persona.oclAsType(KoerperPersona);
z : Zauberer =  aManagedCharacter.persona.oclAsType(Zauberer);
empty : String = '....................' ;
empty40 : String = '........................................' ; 
empty80 : String = empty40+empty40 ; 
column : Sequence(Integer) = Sequence{45,420} ;
size : Integer = 12; }
]  [comment]30[/comment]
[file ('SpellcasterSheet-'+aManagedCharacter.persona.name+'-page2.svg', false, 'UTF-8')]
[pageStart('Spellcaster page for '+aManagedCharacter.persona.name)+' page 2'/]

[comment]print the spell list 2/3 of the page[/comment]
<g
       id="g-Spells"
transform="translate([column->at(1)/],25)">
[printLeftSideUp('_UI_Zauberer_zauber_feature'.localizedString())/]
[for (pz : PersonaZauber | z.zauber)]
[let y : Integer = (40+(i)*12)]
[printSvgFullLine(pz.formel.getText(), empty40,10,y,270)/]
[comment][printSvgFullLine(pz.formel.reichweite.getText(), '',510,y,50)/]
[printSvgFullLine(pz.formel.art.getText(), '',565,y,50)/][/comment]
[printSvgFullLine(pz.formel.entzug.getText(), '',280,y,20)/]
[/let][/for]
[printBotton(column->at(1), 700,350)/]
</g>
[comment]print the bount spirits at the end 1/3[/comment]
<g
       id="g-Quallities"
transform="translate([column->at(1)/],760)">
[printLeftSideUp('_UI_Zauberer_gebundeneGeister_feature'.localizedString())/]
[for (gb : GebundenerGeist | z.gebundeneGeister)]
[let y : Integer = (40+(i)*12)]
[printSvgFullLine(gb.geist.getText(), empty40,10,y,270)/]
[printSvgFullLine(gb.dienste, empty40,280,y,15)/]
[/let][/for]
[printBotton(column->at(1), 300,100)/]
</g>
[comment]right side[/comment]
<g
       id="g-fokus.binding"
transform="translate([column->at(2)/],25)">
[printRightSideUp('_UI_FokusBinding_type'.localizedString())/]

[printBotton(column->at(2), 300)/]
 </g>
<g
       id="g-magic-items"
transform="translate([column->at(2)/],360)">
[printRightSideUp('Magic items'.localizedString())/]

[for (k : AbstraktGegenstand | aManagedCharacter.inventar->select(oclIsKindOf(Fokus)))]
[let ypos : Integer = (20+(1+i)*size) ]
[if (ypos<1050)]
[printSvgFullLine(k.getText(), empty,10,ypos)/]
[printSvgLineValue((k.wert.formatMoney()),255,ypos,size)/]
[/if][/let]
[/for]

[printBotton(column->at(2), 700)/]
 </g>


[comment]end[/comment]
  </g>
</svg>
[/file]
[/template]



[template public printRiggerSheetPageTwo(aManagedCharacter : ManagedCharacter)  
{
kp : KoerperPersona =  aManagedCharacter.persona.oclAsType(KoerperPersona);
v : Sequence(Fahrzeug) =  aManagedCharacter.vehicels;
d : Sequence(Drohne) =  aManagedCharacter.vehicels->select(oclIsKindOf(Drohne));
empty : String = '....................' ;
empty40 : String = '........................................' ; 
column : Sequence(Integer) = Sequence{45,420} ;
size : Integer = 12; }
]  [comment]30[/comment]
[file ('riggerSheet-'+aManagedCharacter.persona.name+'-page2.svg', false, 'UTF-8')]
[pageStart('Rigger page for '+aManagedCharacter.persona.name)+' page 2'/]

[comment]left side[/comment]
    <g
       id="g-rcc"
transform="translate([column->at(1)/],25)"
>
[printLeftSideUp('_UI_RiggerCommandConsole_type'.localizedString())/]
[let it : RiggerCommandConsole = aManagedCharacter.inventar->selectByKind(RiggerCommandConsole)->any(true)]
[printRiggerConsoleDetail(it, empty, 10, 45  , size)/]
[/let]

[printBotton(column->at(1), 160,50)/]
</g>
<g
       	id="g-Vehicleblock-drones"
		transform="translate([column->at(1)/],220)">
[printLeftSideUp('_UI_Drones_feature'.localizedString())/]

[for (it : Drohne | aManagedCharacter.vehicels->select(oclIsKindOf(Drohne)))]
[let y : Integer = 50+ 100 *(i-1)]
[if (y<660)]
[printVehicleDetail(it,empty,10,  y , size)/]
[/if][/let]
[/for]
[printBotton(column->at(1), 830,500)/]
	</g>

[comment]right site[/comment]
<g
       	id="g-Vehicleblock-others"
		transform="translate([column->at(2)/],25)">
[printRightSideUp('_UI_ManagedCharacter_vehicels_feature'.localizedString())/]

[for (it : Fahrzeug | aManagedCharacter.vehicels->select(not oclIsKindOf(Drohne)))]
[let y : Integer = 50+ 100 *(i-1)]
[if (y<360)]
[printVehicleDetail(it,empty,10,  y , size)/]
[/if][/let]
[/for]
[printBotton(column->at(1), 400,150)/]
	</g>
[let pos2 : Integer =460]
[printGearsBlock(aManagedCharacter, empty40, column->at(2), pos2, size)/]
[/let]
  </g>
</svg>
[/file]
[/template]


[template public pageStart(pageName : String)]
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg
   xmlns:osb="http://www.openswatchbook.org/uri/2009/osb"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="210mm"
   height="297mm"
   id="svg2"
   version="1.1"
   inkscape:version="0.48.4 r9939"
   sodipodi:docname="Zeichnung-1.svg">
  <defs
     id="defs4">
  </defs>
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.98994949"
     inkscape:cx="70.952328"
     inkscape:cy="1001.4987"
     inkscape:document-units="px"
     inkscape:current-layer="layer1"
     showgrid="true"
     inkscape:window-width="1320"
     inkscape:window-height="660"
     inkscape:window-x="0"
     inkscape:window-y="174"
     inkscape:window-maximized="0">
    <inkscape:grid
       type="xygrid"
       id="grid2985" />
  </sodipodi:namedview>
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="[escapeXML(pageName)/]">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title>Shadowrun5 character sheet [escapeXML(pageName)/]</dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label="Ebene 1"
     inkscape:groupmode="layer"
     id="layer1">
[/template]

[template public printNewCharacterSheetPageTwo(aManagedCharacter : ManagedCharacter)  
{
kp : KoerperPersona =  aManagedCharacter.persona.oclAsType(KoerperPersona);
empty : String = '....................' ;
empty40 : String = '........................................' ; 
column : Sequence(Integer) = Sequence{45,420} ;
size : Integer = 12; }
]  [comment]30[/comment]
[file ('characterSheet-'+aManagedCharacter.persona.name+'-page2.svg', false, 'UTF-8')]
[pageStart(aManagedCharacter.persona.name)+' page 2'/]

[printFirearmsDataBlock(aManagedCharacter, empty, column->at(1), 25,size,printLeftSideUp('_UI_AbstaktFernKampfwaffe_type'.localizedString()))/]
[let pos : Integer = 75+(aManagedCharacter.inventar->selectByKind(AbstaktFernKampfwaffe)->size()*65)]
[printMeleeDataBlock(aManagedCharacter, empty, column->at(1), pos,size, printLeftSideUp('Meele'.localizedString()))/]
[let pos1 : Integer = pos + 55+(aManagedCharacter.inventar->selectByKind(Nahkampfwaffe)->size()*45)]
[if (not aManagedCharacter.inventar->selectByKind(Cyberdeck)->isEmpty())]
[printCyberdeckBlock(aManagedCharacter, empty,column->at(1), pos1,size)/]
[let pos2 : Integer =pos1+ (100+    13* aManagedCharacter.inventar->selectByKind(Cyberdeck)->any(true).storedPrograms->size()).max(135 + aManagedCharacter.inventar->selectByKind(Cyberdeck)->any(true).matrixZustandMax.div(3)*20)   ]
[switchRigger(aManagedCharacter, empty, column->at(1), pos2,size)/]	
[/let]
[else]
[switchRigger(aManagedCharacter, empty, column->at(1), pos1,size)/]	
[/if]
[/let][/let]

[comment]right side[/comment]
[printGearsBlock(aManagedCharacter, empty40, column->at(2), 25, size)/]
[let pos : Integer = 100+ (aManagedCharacter.inventar->size()*12)]
[printContractBlock(aManagedCharacter, empty40, column->at(2), pos, size)/]
[/let]

  </g>
</svg>
[/file]
[/template]

[**
 * Print the gears and cut the rest
*/]
[template public printVehicleBlock (aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
]
    <g
       	id="g-Vehicleblock"
		transform="translate([x/],[y/])">
[printLeftSideUp('_UI_ManagedCharacter_vehicels_feature'.localizedString())/]


[for (it : Fahrzeug | aManagedCharacter.vehicels)]
[printVehicleDetail(it, empty, 10,50+ 100 *(i-1) , size)/]
[/for]

[let ypos : Integer = (15+aManagedCharacter.vehicels->size()*150) ]
[let pos : Integer = (1046-y).min(ypos+y) ]
[printBotton(30, pos)/]
[/let][/let]
	</g>
[/template]

[comment][template public printVehicleDetail(vehicle : Drohne,empty :String,x:Integer,y:Integer,size : Integer)
{empty40 : String = '........................................' ;empty40_1 : String = '                                        ' ; }
 ]

[/template][/comment]


[template public printVehicleDetail(vehicle : Fahrzeug,empty :String,x:Integer,y:Integer,size : Integer)
{empty40 : String = '........................................' ;empty40_1 : String = '                                        ' ; }
 ]
    <g
       id="g-vehicle-detail"
transform="translate([x/],[y/])"
>

[printSvgFullLine(vehicle.getText(), empty40_1,0,0)/]

[printSvgLine('_UI_Fahrzeug_geschwindigkeit_feature'.localizedString(), empty,0,(1)*size)/]
[printSvgLineValue(vehicle.vehicleSpeed(),125,(1*12),size)/]
[printSvgLine('_UI_Fahrzeug_beschleunigung_feature'.localizedString(), empty,170,(1*size))/]
[printSvgLineValue(vehicle.beschleunigung,290,(1*size),size)/]


[printSvgLine('_UI_Fahrzeug_handling_feature'.localizedString(), empty,0,(2)*size)/]
[printSvgLineValue(vehicle.vehicleHandling(),125,(2*12),size)/]
[printSvgLine('_UI_Fahrzeug_pilot_feature'.localizedString(), empty,170,(2*size))/]
[printSvgLineValue(vehicle.pilot,290,(2*size),size)/]


[printSvgLine('_UI_Fahrzeug_sensor_feature'.localizedString(), empty,0,(3)*size)/]
[printSvgLineValue(vehicle.sensor,125,(3*12),size)/]
[printSvgLine('_UI_Fahrzeug_rumpf_feature'.localizedString(), empty,170,(3*size))/]
[printSvgLineValue(vehicle.vehicleBody(),290,(3*size),size)/]

[printOneMonitorSmall('_UI_FahrzeugZustand_type'.localizedString(),vehicle.zustandMax,0,5+(4*size),14)/]

	</g>
[/template]

[**
 * Print the gears and cut the rest
*/]
[template public printContractBlock (aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
]
    <g
       	id="g-Contracts"
		transform="translate([x/],[y/])">
[printRightSideUp('_UI_ManagedCharacter_contracts_feature'.localizedString())/]

[for (k : Vertrag | aManagedCharacter.contracts)]
[let ypos : Integer = (20+(1+i)*size) ]
[if (ypos+y<1050)]
[printSvgFullLine(k.getText(), empty,10,ypos)/]
[printSvgLineValue((k.wert.formatMoney()),255,ypos,size)/]
[/if][/let]
[/for]
[let ypos : Integer = (15+aManagedCharacter.inventar->size()*size) ]
[let pos : Integer = (1046-y).min(ypos+y) ]
[printBotton(30, pos)/]
[/let][/let]
	</g>
[/template]

[**
 * print the attributes the persona, uses the localized text.
*/]
[template public printRiggerConsoleBlock(aManagedCharacter : ManagedCharacter,empty :String,x:Integer,y:Integer,size : Integer)
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       id="g-cyberdecks"
transform="translate([x/],[y/])"
>
[printLeftSideUp('_UI_RiggerCommandConsole_type'.localizedString())/]

[comment][for (it : RiggerCommandConsole | aManagedCharacter.inventar->selectByKind(RiggerCommandConsole))][/comment]
[let it : RiggerCommandConsole = aManagedCharacter.inventar->selectByKind(RiggerCommandConsole)->any(true)]
[printRiggerConsoleDetail(it, empty, 10, 45  , size)/]
[/let]
[comment][/for][/comment]


[printBotton(x, (11*12)+27)/]
</g>
[/template]

[template public printComlinkDetail(deck : Commlink,empty :String,x:Integer,y:Integer,size : Integer)
{empty40 : String = '........................................' ;
empty40_1 : String = '                                        ' ;
empty20 : String = '....................' ;
 }

 ]
    <g
       id="g-rcc-[x/]-[y/]"
transform="translate([x/],[y/])"
>

[printSvgFullLine(deck.getText(), empty40_1,0,0)/]

[printSvgLine('_UI_MatrixDevice_geraetestufe_feature'.localizedString(), empty20,0,(2)*size)/]
[printSvgLineValue(deck.deviceRating.toString(),125,(2)*12,size)/]

[printSvgFullLine('_UI_RiggerCommandConsole_storedPrograms_feature'.localizedString(), empty40_1,0,(4)*size)/]

[for (prg : BasicProgram | deck.storedPrograms)]
[printSvgFullLine(prg.getText(), empty40,0,(4+i)*size)/]
[/for]
[let pos : Integer = 4*size+  deck.storedPrograms->size()*size]
[printOneMonitorSmall('Matrix', deck.matrixZustandMax, 260, 30, 3)/]
[/let]


</g>
[/template]

[template public printRiggerConsoleDetail(deck : RiggerCommandConsole,empty :String,x:Integer,y:Integer,size : Integer)
{empty40 : String = '........................................' ;empty40_1 : String = '                                        ' ; }
 ]
    <g
       id="g-rcc-[x/]-[y/]"
transform="translate([x/],[y/])"
>

[printSvgFullLine(deck.getText(), empty40_1,0,0)/]

[printSvgLine('_UI_RiggerCommandConsole_zugriffBasis_feature'.localizedString(), empty,0,(1)*size)/]
[printSvgLineValue(deck.zugriffBasis,125,(1*12),size)/]

[printSvgLine('_UI_RiggerCommandConsole_datenverarbeitungBasis_feature'.localizedString(), empty,185,(1)*size)/]
[printSvgLineValue(deck.datenverarbeitungBasis.toString(),305,(1*12),size)/]

[printSvgLine('_UI_MatrixDevice_geraetestufe_feature'.localizedString(), empty,0,(2)*size)/]
[printSvgLineValue(deck.deviceRating.toString(),125,(2)*12,size)/]

[printSvgLine('_UI_RiggerCommandConsole_rauschunterdrueckung_feature'.localizedString(), empty,0,(3)*size)/]
[printSvgLineValue(deck.rauschunterdrueckung.toString(),125,(3)*12,size)/]

[printSvgFullLine('_UI_RiggerCommandConsole_storedPrograms_feature'.localizedString(), empty40_1,0,(4)*size)/]

[for (prg : RiggerProgram | deck.storedPrograms)]
[printSvgFullLine(prg.getText(), empty40,0,(4+i)*size)/]
[/for]
[let pos : Integer = 4*size+  deck.storedPrograms->size()*size]
[printOneMonitorSmall('Matrix', deck.matrixZustandMax, 260, 30, 3)/]
[/let]


</g>
[/template]


[**
 * print the attributes the persona, uses the localized text.
*/]
[template public printCyberdeckBlock(aManagedCharacter : ManagedCharacter,empty :String,x:Integer,y:Integer,size : Integer)
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       id="g-cyberdecks"
transform="translate([x/],[y/])"
>
[printLeftSideUp('_UI_Cyberdeck_type'.localizedString())/]

[comment][for (it : Cyberdeck | aManagedCharacter.inventar->selectByKind(Cyberdeck))][/comment]
[let it : Cyberdeck =  aManagedCharacter.inventar->selectByKind(Cyberdeck)->any(true)]
[printCyberdeckDetail(it, empty, 10,55, size)/]
[comment][/for][/comment]


[printBotton(x, (20+(it.matrixZustandMax.div(3)*20)).max(40+(it.storedPrograms->size()*13))  +27)/]
[/let]
</g>
[/template]


[template public printCyberdeckDetail(deck : Cyberdeck,empty :String,x:Integer,y:Integer,size : Integer)
{empty40 : String = '........................................' ;empty40_1 : String = '                                        ' ; }
 ]
    <g
       id="g-cyberdecks"
transform="translate([x/],[y/])"
>

[printSvgFullLine(deck.getText(), empty40_1,0,0)/]

[printSvgLine('AttributeArray'.localizedString(), empty,0,(1)*size)/]
[printSvgLineValue(deck.cyberDeckAttributes(),125,(1*12),size)/]

[printSvgLine('_UI_Cyberdeck_programSlots_feature'.localizedString(), empty,185,(1)*size)/]
[printSvgLineValue(deck.programSlots.toString(),305,(1*12),size)/]

[printSvgLine('_UI_MatrixAttributes_geraetestufe_feature'.localizedString(), empty,0,(2)*size)/]
[printSvgLineValue(deck.deviceRating.toString(),125,(2)*12,size)/]

[printSvgFullLine('_UI_Cyberdeck_storedPrograms_feature'.localizedString(), empty40_1,0,(3)*size)/]

[for (prg : MatrixProgram | deck.storedPrograms)]
[printSvgFullLine(prg.getText(), empty40,0,(3+i)*size)/]
[/for]
[let pos : Integer = 4*size+  deck.storedPrograms->size()*size]
[printOneMonitorSmall('Matrix', deck.matrixZustandMax, 260, 30, 3)/]
[/let]


</g>
[/template]


[**
 * Print the ki powers if
*/]
[template private switchRigger(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ;
 }]
[if (not aManagedCharacter.inventar->selectByKind(RiggerCommandConsole)->isEmpty())]
[printRiggerConsoleBlock(aManagedCharacter, empty,x, y,size)/]
[let it : RiggerCommandConsole = aManagedCharacter.inventar->selectByKind(RiggerCommandConsole)->any(true)]
[let pos : Integer = 95+ (20+(it.matrixZustandMax.div(3)*20)).max(40+(it.storedPrograms->size()*13))  +27  ]
[printVehicleBlock(aManagedCharacter, empty,x, pos+y,size)/][/let]
[/let]
[else]
[comment][switchKiAdpept(aManagedCharacter,empty, x,y,size)/][/comment]
[printVehicleBlock(aManagedCharacter, empty,x, y,size)/]
[/if]


[/template]



[template public printFirearmsDataBlock(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer ,header:String) 
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       id="g-firearms"
transform="translate([x/],[y/])"
>
[header/]

[for (rw : AbstaktFernKampfwaffe | aManagedCharacter.inventar->selectByKind(AbstaktFernKampfwaffe))]
[printFerkampfWaffeDetail(rw, 0, (40)+((i-1)*65))/]
[/for]

[printBotton(30, 15+(aManagedCharacter.inventar->selectByKind(AbstaktFernKampfwaffe)->size()*65))/]

	</g>
[/template]

[template public printMeleeDataBlock(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer, header : String) 
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       id="g-melee"
transform="translate([x/],[y/])"
>

[header/]

[for (rw : Nahkampfwaffe | aManagedCharacter.inventar->selectByKind(Nahkampfwaffe))]
[printNahkampfWaffeDetail(rw, 0, (40)+((i-1)*45))/]
[/for]

[printBotton(30, 15+(aManagedCharacter.inventar->selectByKind(Nahkampfwaffe)->size()*45))/]

	</g>
[/template]



[template public printNewCharacterSheetPageOne(aManagedCharacter : ManagedCharacter)  
{
kp : KoerperPersona =  aManagedCharacter.persona.oclAsType(KoerperPersona);
empty : String = '....................' ;
empty40 : String = '........................................' ; 
column : Sequence(Integer) = Sequence{45,420} ;
size : Integer = 12; }
]  [comment]30[/comment]
[file ('characterSheet-'+aManagedCharacter.persona.name+'-page1.svg', false, 'UTF-8')]
[pageStart(aManagedCharacter.persona.name)+' page 1'/]

[printPersonalDataBlock(aManagedCharacter, empty, column->at(1), 25,size)/]
[printAttributeBlock(aManagedCharacter, empty,column->at(1),155,size)/]
[printSkillBlock(aManagedCharacter, empty40,column->at(1),349,size)/]
[let pos : Integer = 407+ (aManagedCharacter.persona.fertigkeitsGruppenToFertigkeiten()->size()+aManagedCharacter.persona.fertigkeiten->size())*12   ]
[printQuallitiesBlock(aManagedCharacter, empty40,column->at(1),pos,size)/]
[let pos1 : Integer = 60 + pos + (persona.oclAsType(KoerperPersona).eigenschaften->size()*12)]
[printLifestyleBlock(aManagedCharacter, empty40,column->at(1),pos1,size)/]
[let pos2 : Integer = 82+ pos1 + (aManagedCharacter.inventar->selectByType(Credstick)->size()*12) ]
[printActiveModsBlock(aManagedCharacter, empty40,column->at(1),pos2,size,1050-pos2)/]

[comment][printNotesBlock(column->at(1),pos2+100, 1050-pos2 )/][/comment]
[/let]
[/let][/let]

[comment]right side[/comment]
[printWeaponDetailBlock(aManagedCharacter, empty40, column->at(2), 25, size)/]
[let pos : Integer = 390+  (kp.zustandGeistigMax.max(kp.zustandKoerperlichMax).div(3)*50 )]
[printConditionMonitorBlock(aManagedCharacter, empty40, column->at(2), 230, size)/]
[let pos1 : Integer = pos+ 55+ aManagedCharacter.connections->size() * 12]
[printConnectionsBlock(aManagedCharacter, empty40, column->at(2), pos, size)/]


[if (not aManagedCharacter.persona.oclAsType(KoerperPersona).koerperMods->isEmpty() )]
[printWaresBlock(aManagedCharacter, empty40, column->at(2),pos1,size)/]
[let pos2 : Integer = pos1+ 55+ aManagedCharacter.persona.oclAsType(KoerperPersona).koerperMods->size() * 12]
[switchKiAdpept(aManagedCharacter,empty40, column->at(2),pos2,size)/]
[/let][else]
[switchKiAdpept(aManagedCharacter,empty40, column->at(2),pos1,size)/]
[/if]
[/let][/let]

  </g>
</svg>
[/file]
[/template]

[**
 * Print the ki powers if
*/]
[template private switchTechnomacer(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ;
 }]
[if (persona.oclIsKindOf(Technomancer))]
[printComplexFormsPowerBlock(aManagedCharacter.persona.oclAsType(Technomancer),empty, x,y,size)/]
[let pos : Integer =y+ 55+ aManagedCharacter.persona.oclAsType(Technomancer).complexForms->size()*12 ]
[printGearsBlock(aManagedCharacter,empty, x,pos,size)/][/let]
[else]
[switchKiAdpept(aManagedCharacter,empty, x,y,size)/]
[/if]


[/template]

[**
 * Print the ki powers if
*/]
[template private switchKiAdpept(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ;
 }]
[if (aManagedCharacter.persona.oclIsKindOf(KiAdept))]
[printKiPowerBlock(aManagedCharacter.persona.oclAsType(KiAdept),empty, x,y,size)/]
[let pos : Integer =y+ 55+ aManagedCharacter.persona.oclAsType(KiAdept).kikraft->size()*12 ]
[switchContent2(aManagedCharacter,empty, x,pos,size)/]
[/let]
[else]
[switchContent2(aManagedCharacter,empty, x,y,size)/]	
[/if]	
[/template]

[template private switchContent2(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ;
 }]
[if (persona.oclIsKindOf(Zauberer))]
[printSpellPowerBlock(persona.oclAsType(Zauberer),empty, x,y,size)/]
[let pos : Integer =y+ 55+ aManagedCharacter.persona.oclAsType(Zauberer).zauber->size()*12 ]
[printGearsBlock(aManagedCharacter,empty, x,pos,size)/][/let]
[else]
[printGearsBlock(aManagedCharacter,empty, x,y,size)/]
[/if]
[/template]

[**
 * Print the gears and cut the rest
*/]
[template public printGearsBlock (aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
]
    <g
       	id="g-Gears"
		transform="translate([x/],[y/])">
[printRightSideUp('_UI_ManagedCharacter_inventar_feature'.localizedString())/]

[for (k : AbstraktGegenstand | aManagedCharacter.inventar)]
[let ypos : Integer = (20+(1+i)*size) ]
[if (ypos+y<1050)]
[printSvgFullLine(k.getText(), empty,10,ypos)/]
[printSvgLineValue((k.wert.formatMoney()),255,ypos,size)/]
[/if][/let]
[/for]
[let ypos : Integer = (15+aManagedCharacter.inventar->size()*size) ]
[let pos : Integer = (1050-y).min(ypos+y) ]
[printBotton(25, pos)/]
[/let][/let]
	</g>
[/template]


[template public printComplexFormsPowerBlock (caster: Technomancer,empty :String,
x:Integer,y:Integer,size :Integer) 
]
    <g
       	id="g-complexForms"
		transform="translate([x/],[y/])">
[printRightSideUp('_UI_Technomancer_complexForms_feature'.localizedString())/]

[for (k : PersonaKomplexForm | caster.complexForms)]
[printSvgFullLine(k.form.getText(), empty,10,(20+(1+i)*12))/]
[printSvgLineValue((k.form.schwund),255,(20+(1+i)*12),size)/]
[/for]

[let pos : Integer = caster.complexForms->size() ]
[printBotton(30, ((15+(pos*12))))/]
[/let]
	</g>
[/template]

[template public printSpellPowerBlock (caster: Zauberer,empty :String,
x:Integer,y:Integer,size :Integer) 
]
    <g
       	id="g-Spells"
		transform="translate([x/],[y/])">
[printRightSideUp('_UI_Zauberer_zauber_feature'.localizedString())/]

[for (k : PersonaZauber | caster.zauber)]
[printSvgFullLine(k.formel.getText(), empty,10,(20+(1+i)*12))/]
[printSvgLineValue((k.formel.entzug),255,(20+(1+i)*12),size)/]
[/for]

[let pos : Integer = caster.zauber->size() ]
[printBotton(30, ((15+(pos*12))))/]
[/let]
	</g>
[/template]

[template public printConnectionsBlock (aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ;
 }]
    <g
       	id="g-Augmentation"
		transform="translate([x/],[y/])">
[printRightSideUp('_UI_ManagedCharacter_connections_feature'.localizedString())/]

[for (c : Connection | aManagedCharacter.connections)]
[printSvgFullLine(c.character.persona.name, empty,10,(20+(1+i)*12))/]
[printSvgLineValue((c.influence),255,(20+(1+i)*12),size)/]
[printSvgLineValue((c.loyality),275,(20+(1+i)*12),size)/]
[/for]

[let pos : Integer = aManagedCharacter.connections->size()]
[printBotton(30, ((15+(pos*12))))/]
[/let]
	</g>
[/template]

[template public printWaresBlock (aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ;
kp : KoerperPersona =  aManagedCharacter.persona.oclAsType(KoerperPersona);
 }]
    <g
       	id="g-Augmentation"
		transform="translate([x/],[y/])">
[printRightSideUp('_UI_KoerperPersona_koerperMods_feature'.localizedString())/]

[for (k : Koerpermods | kp.koerperMods)]
[printSvgFullLine(k.getText(), empty,10,(20+(1+i)*12))/]
[printSvgLineValue((k.getEssencesValue()/100),255,(20+(1+i)*12),size)/]
[/for]

[let pos : Integer = kp.koerperMods->size()]
[printBotton(30, ((15+(pos*12))))/]
[/let]
	</g>
[/template]

[template public printKiPowerBlock (adept: KiAdept,empty :String,
x:Integer,y:Integer,size :Integer) 
]
    <g
       	id="g-KiPower"
		transform="translate([x/],[y/])">
[printRightSideUp('_UI_KiAdept_kikraft_feature'.localizedString())/]

[for (k : KiKraft | adept.kikraft)]
[printSvgFullLine(k.getText(), empty,10,(20+(1+i)*12))/]
[printSvgLineValue((k.kraftpunkte/100),255,(20+(1+i)*12),size)/]
[/for]

[let pos : Integer = adept.kikraft->size() ]
[printBotton(30, ((15+(pos*12))))/]
[/let]
	</g>
[/template]




[template public printConditionMonitorBlock(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ;
kp : KoerperPersona =  aManagedCharacter.persona.oclAsType(KoerperPersona);
}]
    <g
       id="g-conditionMonitor"
transform="translate([x/],[y/])"
>

[printRightSideUp('Condition'.localizedString())/]

[let pos : Integer = 105+  (kp.zustandGeistigMax.max(kp.zustandKoerperlichMax).div(3)*50 )]
[printOneMonitor('_UI_KoerperPersona_zustandGeistig_feature',persona.oclAsType(KoerperPersona).zustandGeistigMax,15,40,3)/]
[printOneMonitor('_UI_KoerperPersona_zustandKoerperlich_feature'.localizedString(),persona.oclAsType(KoerperPersona).zustandKoerperlichMax,170,40,3)/]

[printOneMonitorSmall('overflow',persona.oclAsType(KoerperPersona).zustandGrenze,15,pos,14)/]


[printBotton(30, pos+10)/]
[/let]
	</g>
[/template]


[template private printOneMonitor(name : String,value : Integer,x:Integer,y:Integer,rowCount : Integer)]
   <g
       id="g-conditionMonitor-[name/]"
transform="translate([x/],[y/])"
>

[printSvgLineValue(name.localizedString(),0,0,12)/]
[for (it : String | value.createNumberList())]
[let xpos : Integer = (i-1).mod(rowCount)]
[let ypos : Integer = (i-1).div(rowCount)]
   <rect
         y="[10+ ypos*50/]"
         x="[xpos*40  /]"
         height="40"
         width="30"
         id="rect-monitorbox-[it/]"
         style="fill:#fdfdfd;fill-opacity:0;fill-rule:nonzero;stroke:#13100a;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0" />
[comment][printTextSpan1((25 +  xpos*12), 146+ ypos*12,it,6)/][/comment]
[if (xpos=1)]
[printSvgLineValue('-'+(ypos+1)+''  ,115,(32 +  ypos*50 ),18)/]
[/if]
[/let][/let]
[/for]


	</g>
[/template]


[template private printOneMonitorSmall(name : String,value : Integer,x:Integer,y:Integer,rowCount : Integer)]
   <g
       id="g-conditionMonitor-[name/]"
transform="translate([x/],[y/])"
>

[printSvgLineValue(name.localizedString(),0,0,12)/]
[for (it : String | value.createNumberList())]
[let xpos : Integer = (i-1).mod(rowCount)]
[let ypos : Integer = (i-1).div(rowCount)]
   <rect
         y="[10+ ypos*20/]"
         x="[xpos*15  /]"
         height="15"
         width="10"
         id="rect-monitorbox-[it/]"
         style="fill:#fdfdfd;fill-opacity:0;fill-rule:nonzero;stroke:#13100a;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0" />

[/let][/let]
[/for]


	</g>
[/template]


[template public printWeaponDetailBlock(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       id="g-skills"
transform="translate([x/],[y/])"
>

[printRightSideUp('Combat'.localizedString())/]
[printSvgFullLine('_UI_SpezielleAttribute_ausweichen_feature'.localizedString(), empty,10,(40+1*12))/]
[printSvgLineValue(persona.ausweichen,255,(40+1*12),size)/]

[let rw : Kleidung = aManagedCharacter.inventar->selectByKind(Kleidung)->any(true)]
[printSvgFullLine(rw.getText(), empty,10,(40+2*12))/]
[printSvgLineValue(rw.ruestung,255,(40+2*12),size)/]
[printSvgLineValue('|'+(rw.ruestung+persona.oclAsType(KoerperPersona).panzer ),275,(40+2*12),size)/]
[/let]
[let rw : AbstaktFernKampfwaffe = aManagedCharacter.inventar->selectByKind(AbstaktFernKampfwaffe)->any(true)]
[printFerkampfWaffeDetail(rw, 0, (40+3*12))/]
[/let]
[let mw : Nahkampfwaffe = aManagedCharacter.inventar->selectByKind(Nahkampfwaffe)->any(true)]
[printNahkampfWaffeDetail(mw, 0, (40+3*12)+65)/]
[/let]

[printBotton(30, 160)/]

	</g>
[/template]

[**
 * Print the detail of a firearm.
*/]
[template public printNahkampfWaffeDetail(mw : Nahkampfwaffe,x:Integer,y:Integer)]
    <g
       	id="g-notes-[mw.getText().escapeXML()/]"
		transform="translate([x/],[y/])">
 
   <text
       xml:space="preserve"
       style="font-size:12px;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;font-weight:bold;-inkscape-font-specification:Trebuchet MS Bold;font-style:normal;font-stretch:normal;font-variant:normal"
       x="10"
       y="10"
       id="textName-[x/]-[y/]"
	   textLength="180"	
       sodipodi:linespacing="125%">[mw.getText().escapeXML()/]</text>
    <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="10"
       y="25"
       id="text4648-4"
       sodipodi:linespacing="125%">Dmg           Acc	Ap	Reach</text>
    <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="10"
       y="35"
       id="textDamage-[x/]-[y/]"
       textLength="55"
       sodipodi:linespacing="125%">[mw.schadenscode.escapeXML()/]</text>

    <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="70"
       y="35"
       id="text4648-4"
       sodipodi:linespacing="125%">[mw.praezision/]</text>
   <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="85"
       y="35"
       id="text4648-4"
       sodipodi:linespacing="125%">[mw.durchschlagsKraft/]</text>
   <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="100"
       y="35"
       id="text4648-4"
		textLength="120"
       sodipodi:linespacing="125%">[mw.reichweite.escapeXML()/]</text>



	</g>
[/template]

[**
 * Print the detail of a firearm.
*/]
[template public printFerkampfWaffeDetail(fw : AbstaktFernKampfwaffe,x:Integer,y:Integer)]
    <g
       	id="g-notes-1"
		transform="translate([x/],[y/])">
 
   <text
       xml:space="preserve"
       style="font-size:12px;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;font-weight:bold;-inkscape-font-specification:Trebuchet MS Bold;font-style:normal;font-stretch:normal;font-variant:normal"
       x="10"
       y="10"
       id="textName-[x/]-[y/]"
	   textLength="150"	
       sodipodi:linespacing="125%">[fw.getText().escapeXML()/]</text>
   <text
       xml:space="preserve"
       style="font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="200"
       y="10"
       id="textRange-[x/]-[y/]"
	   textLength="120"
       sodipodi:linespacing="125%">[fw.reichweite.getText().escapeXML()/]</text>
    <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="10"
       y="25"
       id="textTT-[x/]-[y/]"
       sodipodi:linespacing="125%">Dmg  Acc	Ap	Mode        	RC 	Ammo </text>
    <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="10"
       y="35"
       id="textDamage-[x/]-[y/]"
	   textLength="15"	
       sodipodi:linespacing="125%">[fw.schadenscode.escapeXML()/]</text>
    <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="40"
       y="35"
       id="textAcc-[x/]-[y/]"
       sodipodi:linespacing="125%">[fw.praezision/]</text>
   <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="55"
       y="35"
       id="textAP-[x/]-[y/]"
       sodipodi:linespacing="125%">[fw.durchschlagsKraft/]</text>
[if (fw.oclIsTypeOf(Feuerwaffe))]
   <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="65"
       y="35"
       textLength="[fw.oclAsType(Feuerwaffe).modie->size() * 15/]"
       id="textMod-[x/]-[y/]"
       sodipodi:linespacing="125%">
  [fw.oclAsType(Feuerwaffe).modie.fwModusToName()/]</text>
   <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="120"
       y="35"
       id="textRC-[x/]-[y/]"
       sodipodi:linespacing="125%">[fw.oclAsType(Feuerwaffe).rueckstoss /]</text>
  <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="135"
       y="35"
       id="textMag-[x/]-[y/]"
	   textLength="50"	
       sodipodi:linespacing="125%">[fw.oclAsType(Feuerwaffe).kapazitaet/] [fw.oclAsType(Feuerwaffe).munitionstyp.fwMagazinToName()/]</text>
[/if]
    <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="10"
       y="45"
       id="textRangeTab-[x/]-[y/]"
       textLength="150"
       sodipodi:linespacing="125%">short  medium   far   extrem</text>
 <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="10"
       y="55"
       id="text1-[x/]-[y/]"
       sodipodi:linespacing="125%">[fw.reichweite.min/]-[fw.reichweite.kurz/]</text>

 <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="50"
       y="55"
       id="text2-[x/]-[y/]"
       sodipodi:linespacing="125%">[fw.reichweite.kurz/]-[fw.reichweite.mittel/]</text>
 <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="90"
       y="55"
       id="text3-[x/]-[y/]"
       sodipodi:linespacing="125%">[fw.reichweite.mittel/]-[fw.reichweite.weit/]</text>
 <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="135"
       y="55"
       id="text4-[x/]-[y/]"
       sodipodi:linespacing="125%">[fw.reichweite.weit/]-[fw.reichweite.extrem/]</text>
[if (fw.oclIsTypeOf(Feuerwaffe))]
   <text
       xml:space="preserve"
       style="font-size:10px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS"
       x="190"
       y="25"
       id="text5-[x/]-[y/]"
       sodipodi:linespacing="125%">['Accessories'.localizedString()/]</text>
[for (it : FernkampfwaffeModifikator | fw.oclAsType(Feuerwaffe).einbau)]
[printSvgLineValue(it.name,190,(25+i*10),10)/]
[/for]
[/if]
	</g>

[/template]


[template public printNotesBlock (x:Integer,y:Integer,size : Integer)]
    <g
       	id="g-notes-1"
		transform="translate([x/],[y/])">
[printLeftSideUp('notes'.localizedString())/]
[printBotton(x, size)/]

	</g>
[/template]


[template public printActiveModsBlock (aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer, botton : Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       	id="g-modificators"
		transform="translate([x/],[y/])">
[printLeftSideUp('Modifications'.localizedString())/]


[for (cred : Sequence(OclAny) | persona.getModList())]
[printSvgFullLine(cred->at(1).getText(), empty,10,(40+(1+i)*12))/]
[printSvgLineValue(cred->at(2),255,(40+(1+i)*12),size)/]
[/for]

[let pos : Integer = persona.getModList()->size() +2 ]
[printBotton(x, botton)/]
[comment][printBotton(x, ((15+(pos*12))))/][/comment]
[/let]
	</g>
[/template]


[template public printLifestyleBlock (aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size :Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       	id="g-Lifestyle"
		transform="translate([x/],[y/])">
[printLeftSideUp('_UI_Lizenz_type'.localizedString())/]

[printSvgFullLine(aManagedCharacter.choosenLifestyle.getText(), empty,10,(40+1*12))/]
[printSvgLineValue(aManagedCharacter.choosenLifestyle.wert.formatMoney(),255,(40+1*12),size)/]

[for (cred : Credstick | aManagedCharacter.inventar->selectByType(Credstick))]
[printSvgFullLine(cred.getText(), empty,10,(40+(1+i)*12))/]
[printSvgLineValue(cred.currentValue,255,(40+(1+i)*12),size)/]
[/for]

[let pos : Integer = aManagedCharacter.inventar->selectByType(Credstick)->size() +2 ]
[printBotton(x, ((25+(pos*12))))/]
[/let]
	</g>
[/template]

[**
 * Print the basic character data.
*/]
[template public printPersonalDataBlock (aManagedCharacter : ManagedCharacter,
empty :String,x:Integer,y:Integer,size : Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       	id="g-PersonalData"
		transform="translate([x/],[y/])">
[printLeftSideUp('PersonalData'.localizedString())/]


[printSvgLine('_UI_Beschreibbar_name_feature'.localizedString(), empty,10,(40+1*12))/]
[printSvgLineValue(persona.name,135,(40+1*12),size)/]

[printSvgLine('_UI_AbstraktPersona_spezies_feature'.localizedString(), empty,10,(40+2*12))/]
[printSvgLineValue(persona.spezies.getText(),135,(40+2*12),size)/]

[printSvgLine('_UI_ManagedCharacter_nativeLanguage_feature'.localizedString(), empty,10,(40+3*12))/]
[printSvgLineValue(aManagedCharacter.nativeLanguage.getText(),135,(40+3*12),size)/]

[printSvgLine('_UI_ManagedCharacter_sex_feature'.localizedString(), empty,10,(40+4*12))/]
[printSvgLineValue(sexToName(aManagedCharacter.sex),135,(40+4*12),size)/]

[printSvgLine('_UI_ManagedCharacter_streetCred_feature'.localizedString(), empty,10,(40+5*12))/]
[printSvgLineValue(aManagedCharacter.streetCred,135,(40+5*12),size)/]
[printSvgLine('_UI_ManagedCharacter_notoriety_feature'.localizedString(), empty,170,(40+5*12))/]
[printSvgLineValue(aManagedCharacter.notoriety,295,(40+5*12),size)/]

[printSvgLine('_UI_ManagedCharacter_currentKarma_feature'.localizedString(), empty,10,(40+6*12))/]
[printSvgLineValue(aManagedCharacter.currentKarma,135,(40+6*12),size)/]
[printSvgLine('_UI_ManagedCharacter_karmaGaint_feature'.localizedString(), empty,170,(40+6*12))/]
[printSvgLineValue(aManagedCharacter.karmaGaint,295,(40+6*12),size)/]

[printBotton(x, ((25+(6*12))))/]
</g>
[/template]





[template public printQuallitiesBlock (aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size : Integer) 
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       id="g-Quallities"
transform="translate([x/],[y/])"
>

[printLeftSideUp('_UI_KoerperPersona_eigenschaften_feature'.localizedString())/]
[for (pe : PersonaEigenschaft | persona.oclAsType(KoerperPersona).eigenschaften)]
[printSvgFullLine(pe.getText(), empty,10,(40+(i)*12))/]
[printSvgLineValue(pe.karmaKosten,255,(40+(i)*12),size)/]
[printSvgLineValue(pe.quallityType() ,300,(40+(i)*12),size)/]
[/for]

[printBotton(x, ((persona.oclAsType(KoerperPersona).eigenschaften->size()*12)+25))/]
</g>
[/template]


[template public printSkillBlock(aManagedCharacter : ManagedCharacter,empty :String,
x:Integer,y:Integer,size : Integer)
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       id="g-skills"
transform="translate([x/],[y/])"
>
[printLeftSideUp('_UI_AbstraktPersona_fertigkeiten_feature'.localizedString())/]

[let count : Integer = persona.fertigkeitsGruppenToFertigkeiten()->size()]
[for (b : Beschreibbar | persona.fertigkeitsGruppenToFertigkeiten())]
[if (b.oclIsKindOf(FertigkeitsGruppe))]
[printSvgFullLine(b.getText(), empty,10,(40+i*12))/]
[printSvgLineValue(findGruppe(b.oclAsType(FertigkeitsGruppe), persona).stufe,255,(40+i*12),size)/]
[else]
[let name : String = b.getText()]
[let attributeName : String = b.oclAsType(Fertigkeit).attribut.getText()]
[let stufe : Integer = findFertigkeitValue(b.oclAsType(Fertigkeit), persona)]
[printSvgFullLine(name, empty,10,(40+i*12))/]
[printSvgLineValue(findFertigkeitValue(b.oclAsType(Fertigkeit), persona),255,(40+i*12),size)/]
[printSvgLineValue(attributeName.substring(1, 3) ,270,(40+i*12),size)/]
[printSvgLineValue((stufe + persona.eGet(b.oclAsType(Fertigkeit).attribut).oclAsType(Integer)) ,300,(40+i*12),size)/]
[/let][/let][/let]
[/if]
[/for]

[for (pfg : PersonaFertigkeit | persona.fertigkeiten)]
[let name : String = pfg.fertigkeit.getText()]
[let attributeName : String = pfg.fertigkeit.attribut.getText()]
[printSvgFullLine(name, empty,10,(40+(count+i)*12))/]
[printSvgLineValue(pfg.stufe,255,(40+(count+i)*12),size)/]
[printSvgLineValue(attributeName.substring(1, 3) ,270,(40+(count+i)*12),size)/]
[printSvgLineValue((pfg.stufe + persona.eGet(pfg.fertigkeit.attribut).oclAsType(Integer)) ,300,(40+(count+i)*12),size)/]
[/let][/let]
[/for]

[printBotton(x, (((count+ persona.fertigkeiten->size())*12)+25))/]

[/let]
</g>
[/template]


[**
 * print the attributes the persona, uses the localized text.
*/]
[template public printAttributeBlock(aManagedCharacter : ManagedCharacter,empty :String,x:Integer,y:Integer,size : Integer)
{persona : AbstraktPersona = aManagedCharacter.persona ; }]
    <g
       id="g-attributes"
transform="translate([x/],[y/])"
>
[printLeftSideUp('Attributes'.localizedString())/]
[for (ea : EAttribute | getOrderedAttibutesForPersona(persona))]
[let attributeName : String = getText(base2Calced(ea))]
[printSvgLine(attributeName, empty,10,(40+i*12))/]
[printSvgLineValue(persona.attributeValue(ea),135,(40+i*12),size)/]
[/let]
[/for]
[let lastPos : Integer = 42+ (persona.getOrderedAttibutesForPersona()->size()+1)*12]
[printSvgLineValue('_UI_ChrakterLimits_koerperlich_feature'.localizedString().concat(' : '+ persona.koerperlich.toString()),10,lastPos,size)/]
[printSvgLineValue('_UI_ChrakterLimits_geistig_feature'.localizedString().concat(' : '+ persona.geistig.toString()),110,lastPos,size)/]
[printSvgLineValue('_UI_ChrakterLimits_sozial_feature'.localizedString().concat(' : '+ persona.sozial.toString()),210,lastPos,size)/]

[/let]

[comment]the second column[/comment]
[printSvgLine('_UI_SpezielleAttribute_essenz_feature'.localizedString(), empty,170,(40+1*12))/]
[printSvgLineValue((persona.essenz/100).toString(),290,(40+1*12),size)/]

[printSvgLine('_UI_SpezielleAttribute_initative_feature'.localizedString(), empty,170,(40+2*12))/]
[printSvgLineValue(persona.toLocalizedInitative(),290,(40+2*12),size)/]


[printSvgLine('_UI_Panzerung_panzer_feature'.localizedString(), empty,170,(40+3*12))/]
[printSvgLineValue(persona.oclAsType(KoerperPersona).panzer.toString(),290,(40+3*12),size)/]


[printSvgLine('_UI_BerechneteAttribute_selbstbeherrschung_feature'.localizedString(), empty,170,(40+4*12))/]
[printSvgLineValue((persona.oclAsType(KoerperPersona).selbstbeherrschung ).toString(),290,(40+4*12),size)/]
[printSvgLine('_UI_BerechneteAttribute_menschenkenntnis_feature'.localizedString(), empty,170,(40+5*12))/]
[printSvgLineValue((persona.oclAsType(KoerperPersona).menschenkenntnis).toString(),290,(40+5*12),size)/]
[printSvgLine('_UI_BerechneteAttribute_errinerungsvermoegen_feature'.localizedString(), empty,170,(40+6*12))/]
[printSvgLineValue((persona.oclAsType(KoerperPersona).errinerungsvermoegen).toString(),290,(40+6*12),size)/]


[printSvgLine('Lifting/Carrying'.localizedString(), empty,170,(40+7*12))/] 
[printSvgLineValueWithLength((persona.liftCarry()),290,(40+7*12),size,35)/]

[printSvgLine('Movment'.localizedString(), empty,170,(40+8*12))/] 
[printSvgLineValueWithLength((persona.movement()),290,(40+8*12),size,42)/]


[if(persona.oclIsKindOf(AstraleProjektion))]
[let ap : AstraleProjektion = persona.oclAsType(AstraleProjektion)]
[printSvgLine('_UI_AstraleProjektion_astraleInitative_feature'.localizedString(), empty,170,(40+9*12))/]
[printSvgLineValue(ap.toLocalizedAstralInitative(),290,(40+9*12),size)/]
[/let][/if]

[printBotton(x, (11*12)+27)/]
</g>
[/template]

[template private printLine(x:Integer,y:Integer,lenght:Integer)]
<path
   style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
   d="m [x/],[y/] [lenght/],0"
   id="path3016"
   inkscape:connector-curvature="0" />
[/template]

[template private printBotton(x:Integer,y:Integer)]
[printBotton(x, y,0) /]
[/template]

[template private printBotton(x:Integer,y:Integer,length : Integer)]
   <path
       style="fill:none;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 0,[y/] 0,[25/] 335,0 0,-[25 + length /]"
       id="path-botton-[x/]-[y/]"
       inkscape:connector-curvature="0" />

[/template]


[template private printRightSideUp(titel : String){
length : Integer = titel.size();
}]
   <path
       style="fill:none;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 0,70 0,-70 325,0 10,10 0,60"
       id="path3251"
 />
   <rect
       style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0"
       id="rect-kat"
       width="[12*length/]"
       height="25"
       x="0"
       y="0" />
    <text
       xml:space="preserve"
       style="font-size:18px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS Bold"
       x="5"
       y="20"
       id="text-kat"
       sodipodi:linespacing="125%">[titel/]</text>
[/template]

[**
 * 
 * Print the upper left frame part. normal is 330
*/]
[template private printLeftSideUp(titel : String)]
[ printLeftSideUp(titel,330) /]
[/template]


[**
 * 
 * Print the upper left frame part. normal is 330
*/]
[template private printLeftSideUp(titel : String, width : Integer)
{length : Integer = titel.size();
pos : Integer = length * 12;
}]
      <path
         inkscape:connector-curvature="0"
         id="path-left-upper"
         d="M 0,70 0,10 10,0 l [width-5 /],0 0,70"
         style="fill:none;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
      <rect
         y="0"
         x="[width-pos+5/]"
         height="25"
         width="[pos/]"
         id="rect-kat"
         style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0" />
      <text
         sodipodi:linespacing="125%"
         id="text-kat"
         y="20"
         x="[width/]"
         style="font-size:18px;font-style:normal;font-weight:bold;text-anchor:end;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Trebuchet MS;-inkscape-font-specification:Trebuchet MS Bold;font-stretch:normal;font-variant:normal"
         xml:space="preserve">[titel/]</text>
[/template]

[template private printSvgFullLine(arg : OclAny,empty :String,x:Integer,y:Integer)]
   <text
       xml:space="preserve"
       style="font-size:12px;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;font-weight:bold;-inkscape-font-specification:Trebuchet MS Bold;font-style:normal;font-stretch:normal;font-variant:normal"
       x="[x/]"
       y="[y/]"
       id="text-[x/]-[y/]"
       sodipodi:linespacing="125%"
       textLength="240"
       lengthAdjust="spacing">[arg.printOutSvgTextLine(empty)/]</text>
[/template]

[template private printSvgFullLine(arg : OclAny,empty :String,x:Integer,y:Integer,length:Integer)]
   <text
       xml:space="preserve"
       style="font-size:12px;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;font-weight:bold;-inkscape-font-specification:Trebuchet MS Bold;font-style:normal;font-stretch:normal;font-variant:normal"
       x="[x/]"
       y="[y/]"
       id="text-[x/]-[y/]"
       sodipodi:linespacing="125%"
       textLength="[length/]"
       lengthAdjust="spacing">[arg.printOutSvgTextLine(empty)/]</text>
[/template]

[template private printSvgLine(arg : OclAny,empty :String,x:Integer,y:Integer,length:Integer)]
   <text
       xml:space="preserve"
       style="font-size:12px;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;font-weight:bold;-inkscape-font-specification:Trebuchet MS Bold;font-style:normal;font-stretch:normal;font-variant:normal"
       x="[x/]"
       y="[y/]"
       id="text-[x/]-[y/]"
       sodipodi:linespacing="125%"
       textLength="[length/]"
       lengthAdjust="spacing">[arg.printOutSvgTextLine(empty)/]</text>
[/template]

[template private printSvgLine(arg : OclAny,empty :String,x:Integer,y:Integer)]
   <text
       xml:space="preserve"
       style="font-size:12px;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;font-weight:bold;-inkscape-font-specification:Trebuchet MS Bold;font-style:normal;font-stretch:normal;font-variant:normal"
       x="[x/]"
       y="[y/]"
       id="text-[x/]-[y/]"
       sodipodi:linespacing="125%"
       textLength="120"
       lengthAdjust="spacing">[arg.printOutSvgTextLine(empty)/]</text>
[/template]
[**
 * Prints a value text at x,y with the size of 12.
*/]
[template public printSvgLineValue(arg : OclAny,x:Integer,y:Integer,size : Integer)]
   <svg:text
       xml:space="preserve"
       style="font-size:[size/]px;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;font-weight:bold;-inkscape-font-specification:Trebuchet MS Bold;font-style:normal;font-stretch:normal;font-variant:normal"
       x="[x/]"
       y="[y/]"
       id="text-[x/]-[y/]"
       sodipodi:linespacing="125%">[arg.printOutSvgTextLine()/]</svg:text>
[/template]
[**
 * Prints a value text at x,y with the size of 12.
*/]
[template private printSvgLineValueWithLength(arg : OclAny,x:Integer,y:Integer,size : Integer,length : Integer)]
   <text
       xml:space="preserve"
       style="font-size:[size/]px;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Trebuchet MS;font-weight:bold;-inkscape-font-specification:Trebuchet MS Bold;font-style:normal;font-stretch:normal;font-variant:normal"
       x="[x/]"
       y="[y/]"
       id="text-[x/]-[y/]"
       textLength="[length/]"
       sodipodi:linespacing="125%">[arg.printOutSvgTextLine()/]</text>
[/template]

[**
 * Get the text from the itemprovider, printPlusSpace and escape to xml
*/]
[comment][template private printOutSvgTextLine(arg : String,empty :String)]
[arg.printTextPlusSpace(empty).escapeXML()/][/template][/comment]
[**
 * Get the text from the itemprovider, printPlusSpace and escape to xml
*/]
[template private printOutSvgTextLine(arg : OclAny,empty :String)]
[escapeXML(printTextPlusSpace( arg.getText(),empty))/][/template]
[template private printOutSvgTextLine(arg : OclAny)]
[escapeXML(arg.getText())/][/template]
